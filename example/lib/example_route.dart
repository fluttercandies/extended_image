// GENERATED CODE - DO NOT MODIFY MANUALLY
// **************************************************************************
// Auto generated by https://github.com/fluttercandies/ff_annotation_route
// **************************************************************************
// fast mode: true
// version: 10.1.0
// **************************************************************************
// ignore_for_file: prefer_const_literals_to_create_immutables,unused_local_variable,unused_import,unnecessary_import,unused_shown_name,implementation_imports,duplicate_import,library_private_types_in_public_api
import 'package:example/common/data/tu_chong_source.dart' hide asT;
import 'package:example/common/model/pic_swiper_item.dart';
import 'package:ff_annotation_route_library/ff_annotation_route_library.dart';
import 'package:flutter/widgets.dart';

import 'common/widget/pic_swiper.dart';
import 'pages/complex/image_editor_demo.dart';
import 'pages/complex/live_photo_demo.dart';
import 'pages/complex/memory_usage_demo.dart';
import 'pages/complex/photo_view_demo.dart';
import 'pages/complex/waterfall_flow_demo.dart';
import 'pages/main_page.dart';
import 'pages/simple/custom_image_demo.dart';
import 'pages/simple/image_demo.dart';
import 'pages/simple/image_editor_demo.dart';
import 'pages/simple/loading_progress.dart';
import 'pages/simple/paint_image_demo.dart';
import 'pages/simple/photo_view_demo.dart'
    as simplephotoviewdemo0085a2a34d373fe52ef79255573dc760;
import 'pages/simple/simple_photo_view_demo.dart'
    as simplephotoviewdemo8f7565503637697990b9e02e846a83f9;
import 'pages/simple/simple_photo_view_demo.dart' hide SimplePhotoViewDemo;
import 'pages/simple/slide_page_demo.dart';
import 'pages/simple/zoom_image_demo.dart';

/// Get route settings base on route name, auto generated by https://github.com/fluttercandies/ff_annotation_route
FFRouteSettings getRouteSettings({
  required String name,
  Map<String, dynamic>? arguments,
  PageBuilder? notFoundPageBuilder,
}) {
  final Map<String, dynamic> safeArguments =
      arguments ?? const <String, dynamic>{};
  switch (name) {
    case 'fluttercandies://LivePhotoDemo':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => LivePhotoDemo(),
        routeName: 'LivePhoto',
        description: 'a live photho demo.',
        exts: <String, dynamic>{
          'group': 'Complex',
          'order': 5,
        },
      );
    case 'fluttercandies://LivePhotoPicsWiper':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => LivePhotoPicsWiper(
          key: asT<Key?>(
            safeArguments['key'],
          ),
          url: asT<String>(
            safeArguments['url'],
          )!,
          images: asT<List<String>>(
            safeArguments['images'],
          )!,
          stopPlayLivePhotoWhenSlidingPage: asT<bool>(
            safeArguments['stopPlayLivePhotoWhenSlidingPage'],
            false,
          )!,
          stopPlayLivePhotoWhenGesture: asT<bool>(
            safeArguments['stopPlayLivePhotoWhenGesture'],
            false,
          )!,
        ),
        routeName: 'LivePhotoPicsWiper',
        pageRouteType: PageRouteType.transparent,
        description: 'demo for LivePhoto Pics Wiper.',
      );
    case 'fluttercandies://MemoryUsageDemo':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => MemoryUsageDemo(),
        routeName: 'MemoryUsage',
        description: 'show how to reduce memory usage.',
        exts: <String, dynamic>{
          'group': 'Complex',
          'order': 3,
        },
      );
    case 'fluttercandies://SimplePhotoView':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => simplephotoviewdemo8f7565503637697990b9e02e846a83f9
            .SimplePhotoViewDemo(),
        routeName: 'SimplePhotoView',
        description: 'Simple demo for PhotoView.',
        exts: <String, dynamic>{
          'group': 'Simple',
          'order': 8,
        },
      );
    case 'fluttercandies://SimplePicsWiper':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => SimplePicsWiper(
          url: asT<String>(
            safeArguments['url'],
          )!,
          images: asT<List<String>>(
            safeArguments['images'],
          )!,
        ),
        routeName: 'SimplePicsWiper',
        pageRouteType: PageRouteType.transparent,
        description: 'Simple demo for Simple Pics Wiper.',
      );
    case 'fluttercandies://WaterfallFlowDemo':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => WaterfallFlowDemo(),
        routeName: 'WaterfallFlow',
        description: 'WaterfallFlow with ExtendedImage.',
        exts: <String, dynamic>{
          'group': 'Complex',
          'order': 0,
        },
      );
    case 'fluttercandies://customimage':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => CustomImageDemo(),
        routeName: 'Custom load state',
        description: 'Custom state for loading, failed and completed.',
        exts: <String, dynamic>{
          'group': 'Simple',
          'order': 1,
        },
      );
    case 'fluttercandies://demogrouppage':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => DemoGroupPage(
          keyValue: asT<MapEntry<String, List<DemoRouteResult>>>(
            safeArguments['keyValue'],
          )!,
        ),
        routeName: 'DemoGroupPage',
      );
    case 'fluttercandies://extendedImageGesturePageView':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => simplephotoviewdemo0085a2a34d373fe52ef79255573dc760
            .SimplePhotoViewDemo(),
        showStatusBar: false,
        routeName: 'ExtendedImageGesturePageView',
        description: 'Simple demo for ExtendedImageGesturePageView.',
        exts: <String, dynamic>{
          'group': 'Simple',
          'order': 7,
        },
      );
    case 'fluttercandies://image':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => ImageDemo(),
        routeName: 'Image',
        description: 'Cached image with border,shape,borderRadius.',
        exts: <String, dynamic>{
          'group': 'Simple',
          'order': 0,
        },
      );
    case 'fluttercandies://imageeditor':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => ImageEditorDemo(),
        routeName: 'ImageEditor',
        description: 'Crop,rotate and flip with image editor.',
        exts: <String, dynamic>{
          'group': 'Complex',
          'order': 1,
        },
      );
    case 'fluttercandies://loadingprogress':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => LoadingProgress(),
        routeName: 'Loading progress',
        description: 'Loading progress for network image.',
        exts: <String, dynamic>{
          'group': 'Simple',
          'order': 2,
        },
      );
    case 'fluttercandies://mainpage':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => MainPage(),
        routeName: 'MainPage',
      );
    case 'fluttercandies://paintimage':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => PaintImageDemo(),
        routeName: 'Paint image',
        description: 'Paint any thing before or after raw image is painted.',
        exts: <String, dynamic>{
          'group': 'Simple',
          'order': 3,
        },
      );
    case 'fluttercandies://photoview':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => PhotoViewDemo(),
        routeName: 'PhotoView',
        description: 'Complex demo for photo view.',
        exts: <String, dynamic>{
          'group': 'Complex',
          'order': 2,
        },
      );
    case 'fluttercandies://picswiper':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => PicSwiper(
          index: asT<int?>(
            safeArguments['index'],
          ),
          pics: asT<List<PicSwiperItem>?>(
            safeArguments['pics'],
          ),
          tuChongItem: asT<TuChongItem?>(
            safeArguments['tuChongItem'],
          ),
        ),
        showStatusBar: false,
        routeName: 'PicSwiper',
        pageRouteType: PageRouteType.transparent,
      );
    case 'fluttercandies://simpleimageeditor':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => SimpleImageEditor(),
        routeName: 'ImageEditor',
        description: 'Crop with image editor.',
        exts: <String, dynamic>{
          'group': 'Simple',
          'order': 6,
        },
      );
    case 'fluttercandies://slidepage':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => SlidePageDemo(),
        routeName: 'SlidePage',
        description: 'Simple demo for slide page.',
        exts: <String, dynamic>{
          'group': 'Simple',
          'order': 5,
        },
      );
    case 'fluttercandies://slidepageitem':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => SlidePage(
          url: asT<String?>(
            safeArguments['url'],
          ),
        ),
        routeName: 'SlidePageItem',
        pageRouteType: PageRouteType.transparent,
        description: 'Simple demo for Sliding.',
      );
    case 'fluttercandies://zoomimage':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => ZoomImageDemo(),
        routeName: 'ImageZoom',
        description: 'Zoom and Pan.',
        exts: <String, dynamic>{
          'group': 'Simple',
          'order': 4,
        },
      );
    default:
      return FFRouteSettings(
        name: FFRoute.notFoundName,
        routeName: FFRoute.notFoundRouteName,
        builder: notFoundPageBuilder ?? () => Container(),
      );
  }
}
